/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marcelmika.lims.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.marcelmika.lims.model.OpenedConversation;
import com.marcelmika.lims.model.OpenedConversationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OpenedConversation service. Represents a row in the &quot;LiferayLIMS_OpenedConversation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.marcelmika.lims.model.OpenedConversationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OpenedConversationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OpenedConversationImpl
 * @see com.marcelmika.lims.model.OpenedConversation
 * @see com.marcelmika.lims.model.OpenedConversationModel
 * @generated
 */
public class OpenedConversationModelImpl extends BaseModelImpl<OpenedConversation>
	implements OpenedConversationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a opened conversation model instance should use the {@link com.marcelmika.lims.model.OpenedConversation} interface instead.
	 */
	public static final String TABLE_NAME = "LiferayLIMS_OpenedConversation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ocid", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "conversationId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LiferayLIMS_OpenedConversation (ocid LONG not null primary key,userId LONG,conversationId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LiferayLIMS_OpenedConversation";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.marcelmika.lims.model.OpenedConversation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.marcelmika.lims.model.OpenedConversation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.marcelmika.lims.model.OpenedConversation"),
			true);
	public static long CONVERSATIONID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.marcelmika.lims.model.OpenedConversation"));

	public OpenedConversationModelImpl() {
	}

	public long getPrimaryKey() {
		return _ocid;
	}

	public void setPrimaryKey(long primaryKey) {
		setOcid(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_ocid);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return OpenedConversation.class;
	}

	public String getModelClassName() {
		return OpenedConversation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ocid", getOcid());
		attributes.put("userId", getUserId());
		attributes.put("conversationId", getConversationId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ocid = (Long)attributes.get("ocid");

		if (ocid != null) {
			setOcid(ocid);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String conversationId = (String)attributes.get("conversationId");

		if (conversationId != null) {
			setConversationId(conversationId);
		}
	}

	public long getOcid() {
		return _ocid;
	}

	public void setOcid(long ocid) {
		_ocid = ocid;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public String getConversationId() {
		if (_conversationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _conversationId;
		}
	}

	public void setConversationId(String conversationId) {
		_columnBitmask |= CONVERSATIONID_COLUMN_BITMASK;

		if (_originalConversationId == null) {
			_originalConversationId = _conversationId;
		}

		_conversationId = conversationId;
	}

	public String getOriginalConversationId() {
		return GetterUtil.getString(_originalConversationId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			OpenedConversation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OpenedConversation toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (OpenedConversation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		OpenedConversationImpl openedConversationImpl = new OpenedConversationImpl();

		openedConversationImpl.setOcid(getOcid());
		openedConversationImpl.setUserId(getUserId());
		openedConversationImpl.setConversationId(getConversationId());

		openedConversationImpl.resetOriginalValues();

		return openedConversationImpl;
	}

	public int compareTo(OpenedConversation openedConversation) {
		long primaryKey = openedConversation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		OpenedConversation openedConversation = null;

		try {
			openedConversation = (OpenedConversation)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = openedConversation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		OpenedConversationModelImpl openedConversationModelImpl = this;

		openedConversationModelImpl._originalUserId = openedConversationModelImpl._userId;

		openedConversationModelImpl._setOriginalUserId = false;

		openedConversationModelImpl._originalConversationId = openedConversationModelImpl._conversationId;

		openedConversationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OpenedConversation> toCacheModel() {
		OpenedConversationCacheModel openedConversationCacheModel = new OpenedConversationCacheModel();

		openedConversationCacheModel.ocid = getOcid();

		openedConversationCacheModel.userId = getUserId();

		openedConversationCacheModel.conversationId = getConversationId();

		String conversationId = openedConversationCacheModel.conversationId;

		if ((conversationId != null) && (conversationId.length() == 0)) {
			openedConversationCacheModel.conversationId = null;
		}

		return openedConversationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{ocid=");
		sb.append(getOcid());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", conversationId=");
		sb.append(getConversationId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.marcelmika.lims.model.OpenedConversation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ocid</column-name><column-value><![CDATA[");
		sb.append(getOcid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conversationId</column-name><column-value><![CDATA[");
		sb.append(getConversationId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OpenedConversation.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			OpenedConversation.class
		};
	private long _ocid;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _conversationId;
	private String _originalConversationId;
	private long _columnBitmask;
	private OpenedConversation _escapedModelProxy;
}