/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marcelmika.lims.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.marcelmika.lims.model.Buddy;
import com.marcelmika.lims.model.BuddyModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Buddy service. Represents a row in the &quot;LiferayLIMS_Buddy&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.marcelmika.lims.model.BuddyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BuddyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BuddyImpl
 * @see com.marcelmika.lims.model.Buddy
 * @see com.marcelmika.lims.model.BuddyModel
 * @generated
 */
public class BuddyModelImpl extends BaseModelImpl<Buddy> implements BuddyModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a buddy model instance should use the {@link com.marcelmika.lims.model.Buddy} interface instead.
	 */
	public static final String TABLE_NAME = "LiferayLIMS_Buddy";
	public static final Object[][] TABLE_COLUMNS = {
			{ "bid", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "portraitId", Types.BIGINT },
			{ "fullName", Types.VARCHAR },
			{ "screenName", Types.VARCHAR },
			{ "statusMessage", Types.VARCHAR },
			{ "isTyping", Types.BOOLEAN },
			{ "awake", Types.BOOLEAN },
			{ "status", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LiferayLIMS_Buddy (bid LONG not null primary key,userId LONG,companyId LONG,portraitId LONG,fullName VARCHAR(75) null,screenName VARCHAR(75) null,statusMessage VARCHAR(75) null,isTyping BOOLEAN,awake BOOLEAN,status VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LiferayLIMS_Buddy";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.marcelmika.lims.model.Buddy"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.marcelmika.lims.model.Buddy"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.marcelmika.lims.model.Buddy"));

	public BuddyModelImpl() {
	}

	public long getPrimaryKey() {
		return _bid;
	}

	public void setPrimaryKey(long primaryKey) {
		setBid(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_bid);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Buddy.class;
	}

	public String getModelClassName() {
		return Buddy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("bid", getBid());
		attributes.put("userId", getUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("portraitId", getPortraitId());
		attributes.put("fullName", getFullName());
		attributes.put("screenName", getScreenName());
		attributes.put("statusMessage", getStatusMessage());
		attributes.put("isTyping", getIsTyping());
		attributes.put("awake", getAwake());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long bid = (Long)attributes.get("bid");

		if (bid != null) {
			setBid(bid);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long portraitId = (Long)attributes.get("portraitId");

		if (portraitId != null) {
			setPortraitId(portraitId);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		String screenName = (String)attributes.get("screenName");

		if (screenName != null) {
			setScreenName(screenName);
		}

		String statusMessage = (String)attributes.get("statusMessage");

		if (statusMessage != null) {
			setStatusMessage(statusMessage);
		}

		Boolean isTyping = (Boolean)attributes.get("isTyping");

		if (isTyping != null) {
			setIsTyping(isTyping);
		}

		Boolean awake = (Boolean)attributes.get("awake");

		if (awake != null) {
			setAwake(awake);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	public long getBid() {
		return _bid;
	}

	public void setBid(long bid) {
		_bid = bid;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getPortraitId() {
		return _portraitId;
	}

	public void setPortraitId(long portraitId) {
		_portraitId = portraitId;
	}

	public String getFullName() {
		if (_fullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullName;
		}
	}

	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	public String getScreenName() {
		if (_screenName == null) {
			return StringPool.BLANK;
		}
		else {
			return _screenName;
		}
	}

	public void setScreenName(String screenName) {
		_screenName = screenName;
	}

	public String getStatusMessage() {
		if (_statusMessage == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusMessage;
		}
	}

	public void setStatusMessage(String statusMessage) {
		_statusMessage = statusMessage;
	}

	public boolean getIsTyping() {
		return _isTyping;
	}

	public boolean isIsTyping() {
		return _isTyping;
	}

	public void setIsTyping(boolean isTyping) {
		_isTyping = isTyping;
	}

	public boolean getAwake() {
		return _awake;
	}

	public boolean isAwake() {
		return _awake;
	}

	public void setAwake(boolean awake) {
		_awake = awake;
	}

	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Buddy.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Buddy toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Buddy)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		BuddyImpl buddyImpl = new BuddyImpl();

		buddyImpl.setBid(getBid());
		buddyImpl.setUserId(getUserId());
		buddyImpl.setCompanyId(getCompanyId());
		buddyImpl.setPortraitId(getPortraitId());
		buddyImpl.setFullName(getFullName());
		buddyImpl.setScreenName(getScreenName());
		buddyImpl.setStatusMessage(getStatusMessage());
		buddyImpl.setIsTyping(getIsTyping());
		buddyImpl.setAwake(getAwake());
		buddyImpl.setStatus(getStatus());

		buddyImpl.resetOriginalValues();

		return buddyImpl;
	}

	public int compareTo(Buddy buddy) {
		long primaryKey = buddy.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Buddy buddy = null;

		try {
			buddy = (Buddy)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = buddy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Buddy> toCacheModel() {
		BuddyCacheModel buddyCacheModel = new BuddyCacheModel();

		buddyCacheModel.bid = getBid();

		buddyCacheModel.userId = getUserId();

		buddyCacheModel.companyId = getCompanyId();

		buddyCacheModel.portraitId = getPortraitId();

		buddyCacheModel.fullName = getFullName();

		String fullName = buddyCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			buddyCacheModel.fullName = null;
		}

		buddyCacheModel.screenName = getScreenName();

		String screenName = buddyCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			buddyCacheModel.screenName = null;
		}

		buddyCacheModel.statusMessage = getStatusMessage();

		String statusMessage = buddyCacheModel.statusMessage;

		if ((statusMessage != null) && (statusMessage.length() == 0)) {
			buddyCacheModel.statusMessage = null;
		}

		buddyCacheModel.isTyping = getIsTyping();

		buddyCacheModel.awake = getAwake();

		buddyCacheModel.status = getStatus();

		String status = buddyCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			buddyCacheModel.status = null;
		}

		return buddyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{bid=");
		sb.append(getBid());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", portraitId=");
		sb.append(getPortraitId());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", screenName=");
		sb.append(getScreenName());
		sb.append(", statusMessage=");
		sb.append(getStatusMessage());
		sb.append(", isTyping=");
		sb.append(getIsTyping());
		sb.append(", awake=");
		sb.append(getAwake());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.marcelmika.lims.model.Buddy");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>bid</column-name><column-value><![CDATA[");
		sb.append(getBid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portraitId</column-name><column-value><![CDATA[");
		sb.append(getPortraitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screenName</column-name><column-value><![CDATA[");
		sb.append(getScreenName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusMessage</column-name><column-value><![CDATA[");
		sb.append(getStatusMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isTyping</column-name><column-value><![CDATA[");
		sb.append(getIsTyping());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>awake</column-name><column-value><![CDATA[");
		sb.append(getAwake());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Buddy.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Buddy.class
		};
	private long _bid;
	private long _userId;
	private String _userUuid;
	private long _companyId;
	private long _portraitId;
	private String _fullName;
	private String _screenName;
	private String _statusMessage;
	private boolean _isTyping;
	private boolean _awake;
	private String _status;
	private Buddy _escapedModelProxy;
}