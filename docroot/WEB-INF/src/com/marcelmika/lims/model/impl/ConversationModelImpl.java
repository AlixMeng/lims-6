/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.marcelmika.lims.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.marcelmika.lims.model.Conversation;
import com.marcelmika.lims.model.ConversationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Conversation service. Represents a row in the &quot;LiferayLIMS_Conversation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.marcelmika.lims.model.ConversationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConversationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConversationImpl
 * @see com.marcelmika.lims.model.Conversation
 * @see com.marcelmika.lims.model.ConversationModel
 * @generated
 */
public class ConversationModelImpl extends BaseModelImpl<Conversation>
	implements ConversationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a conversation model instance should use the {@link com.marcelmika.lims.model.Conversation} interface instead.
	 */
	public static final String TABLE_NAME = "LiferayLIMS_Conversation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cid", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "conversationId", Types.VARCHAR },
			{ "conversationType", Types.VARCHAR },
			{ "conversationVisibility", Types.VARCHAR },
			{ "conversationName", Types.VARCHAR },
			{ "unreadMessages", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table LiferayLIMS_Conversation (cid LONG not null primary key,userId LONG,conversationId VARCHAR(75) null,conversationType VARCHAR(75) null,conversationVisibility VARCHAR(75) null,conversationName VARCHAR(75) null,unreadMessages INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table LiferayLIMS_Conversation";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.marcelmika.lims.model.Conversation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.marcelmika.lims.model.Conversation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.marcelmika.lims.model.Conversation"),
			true);
	public static long CONVERSATIONID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.marcelmika.lims.model.Conversation"));

	public ConversationModelImpl() {
	}

	public long getPrimaryKey() {
		return _cid;
	}

	public void setPrimaryKey(long primaryKey) {
		setCid(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_cid);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Conversation.class;
	}

	public String getModelClassName() {
		return Conversation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cid", getCid());
		attributes.put("userId", getUserId());
		attributes.put("conversationId", getConversationId());
		attributes.put("conversationType", getConversationType());
		attributes.put("conversationVisibility", getConversationVisibility());
		attributes.put("conversationName", getConversationName());
		attributes.put("unreadMessages", getUnreadMessages());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cid = (Long)attributes.get("cid");

		if (cid != null) {
			setCid(cid);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String conversationId = (String)attributes.get("conversationId");

		if (conversationId != null) {
			setConversationId(conversationId);
		}

		String conversationType = (String)attributes.get("conversationType");

		if (conversationType != null) {
			setConversationType(conversationType);
		}

		String conversationVisibility = (String)attributes.get(
				"conversationVisibility");

		if (conversationVisibility != null) {
			setConversationVisibility(conversationVisibility);
		}

		String conversationName = (String)attributes.get("conversationName");

		if (conversationName != null) {
			setConversationName(conversationName);
		}

		Integer unreadMessages = (Integer)attributes.get("unreadMessages");

		if (unreadMessages != null) {
			setUnreadMessages(unreadMessages);
		}
	}

	public long getCid() {
		return _cid;
	}

	public void setCid(long cid) {
		_cid = cid;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public String getConversationId() {
		if (_conversationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _conversationId;
		}
	}

	public void setConversationId(String conversationId) {
		_columnBitmask |= CONVERSATIONID_COLUMN_BITMASK;

		if (_originalConversationId == null) {
			_originalConversationId = _conversationId;
		}

		_conversationId = conversationId;
	}

	public String getOriginalConversationId() {
		return GetterUtil.getString(_originalConversationId);
	}

	public String getConversationType() {
		if (_conversationType == null) {
			return StringPool.BLANK;
		}
		else {
			return _conversationType;
		}
	}

	public void setConversationType(String conversationType) {
		_conversationType = conversationType;
	}

	public String getConversationVisibility() {
		if (_conversationVisibility == null) {
			return StringPool.BLANK;
		}
		else {
			return _conversationVisibility;
		}
	}

	public void setConversationVisibility(String conversationVisibility) {
		_conversationVisibility = conversationVisibility;
	}

	public String getConversationName() {
		if (_conversationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _conversationName;
		}
	}

	public void setConversationName(String conversationName) {
		_conversationName = conversationName;
	}

	public int getUnreadMessages() {
		return _unreadMessages;
	}

	public void setUnreadMessages(int unreadMessages) {
		_unreadMessages = unreadMessages;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Conversation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Conversation toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Conversation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ConversationImpl conversationImpl = new ConversationImpl();

		conversationImpl.setCid(getCid());
		conversationImpl.setUserId(getUserId());
		conversationImpl.setConversationId(getConversationId());
		conversationImpl.setConversationType(getConversationType());
		conversationImpl.setConversationVisibility(getConversationVisibility());
		conversationImpl.setConversationName(getConversationName());
		conversationImpl.setUnreadMessages(getUnreadMessages());

		conversationImpl.resetOriginalValues();

		return conversationImpl;
	}

	public int compareTo(Conversation conversation) {
		long primaryKey = conversation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Conversation conversation = null;

		try {
			conversation = (Conversation)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = conversation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ConversationModelImpl conversationModelImpl = this;

		conversationModelImpl._originalUserId = conversationModelImpl._userId;

		conversationModelImpl._setOriginalUserId = false;

		conversationModelImpl._originalConversationId = conversationModelImpl._conversationId;

		conversationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Conversation> toCacheModel() {
		ConversationCacheModel conversationCacheModel = new ConversationCacheModel();

		conversationCacheModel.cid = getCid();

		conversationCacheModel.userId = getUserId();

		conversationCacheModel.conversationId = getConversationId();

		String conversationId = conversationCacheModel.conversationId;

		if ((conversationId != null) && (conversationId.length() == 0)) {
			conversationCacheModel.conversationId = null;
		}

		conversationCacheModel.conversationType = getConversationType();

		String conversationType = conversationCacheModel.conversationType;

		if ((conversationType != null) && (conversationType.length() == 0)) {
			conversationCacheModel.conversationType = null;
		}

		conversationCacheModel.conversationVisibility = getConversationVisibility();

		String conversationVisibility = conversationCacheModel.conversationVisibility;

		if ((conversationVisibility != null) &&
				(conversationVisibility.length() == 0)) {
			conversationCacheModel.conversationVisibility = null;
		}

		conversationCacheModel.conversationName = getConversationName();

		String conversationName = conversationCacheModel.conversationName;

		if ((conversationName != null) && (conversationName.length() == 0)) {
			conversationCacheModel.conversationName = null;
		}

		conversationCacheModel.unreadMessages = getUnreadMessages();

		return conversationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{cid=");
		sb.append(getCid());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", conversationId=");
		sb.append(getConversationId());
		sb.append(", conversationType=");
		sb.append(getConversationType());
		sb.append(", conversationVisibility=");
		sb.append(getConversationVisibility());
		sb.append(", conversationName=");
		sb.append(getConversationName());
		sb.append(", unreadMessages=");
		sb.append(getUnreadMessages());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.marcelmika.lims.model.Conversation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cid</column-name><column-value><![CDATA[");
		sb.append(getCid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conversationId</column-name><column-value><![CDATA[");
		sb.append(getConversationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conversationType</column-name><column-value><![CDATA[");
		sb.append(getConversationType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conversationVisibility</column-name><column-value><![CDATA[");
		sb.append(getConversationVisibility());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conversationName</column-name><column-value><![CDATA[");
		sb.append(getConversationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unreadMessages</column-name><column-value><![CDATA[");
		sb.append(getUnreadMessages());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Conversation.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Conversation.class
		};
	private long _cid;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _conversationId;
	private String _originalConversationId;
	private String _conversationType;
	private String _conversationVisibility;
	private String _conversationName;
	private int _unreadMessages;
	private long _columnBitmask;
	private Conversation _escapedModelProxy;
}